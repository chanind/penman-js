"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[55],{4259:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>h,contentTitle:()=>c,default:()=>j,frontMatter:()=>o,metadata:()=>t,toc:()=>a});var n=r(5893),l=r(1151);function d(e){const i={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"class-model",children:"Class: Model"}),"\n",(0,n.jsx)(i.p,{children:"Represents a semantic model for Penman graphs."}),"\n",(0,n.jsx)(i.p,{children:"The model defines elements such as valid roles and transformations."}),"\n",(0,n.jsxs)("div",{class:"padding-left--lg",children:[(0,n.jsx)(i.h3,{id:"model-constructor",children:"constructor"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"new Model"}),"(",(0,n.jsx)(i.code,{children:"topVariable?"}),", ",(0,n.jsx)(i.code,{children:"topRole?"}),", ",(0,n.jsx)(i.code,{children:"conceptRole?"}),", ",(0,n.jsx)(i.code,{children:"roles?"}),", ",(0,n.jsx)(i.code,{children:"normalizations?"}),", ",(0,n.jsx)(i.code,{children:"reifications?"}),"): ",(0,n.jsx)(i.code,{children:"Model"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-conceptRole",children:"conceptRole"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"conceptRole"}),": ",(0,n.jsx)(i.code,{children:"string"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-dereifications",children:"dereifications"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"dereifications"}),": ",(0,n.jsx)(i.code,{children:"Object"})]}),(0,n.jsx)(i.h4,{id:"index-signature",children:"Index signature"}),(0,n.jsxs)(i.p,{children:["\u25aa [key: ",(0,n.jsx)(i.code,{children:"Constant"}),"]: ",(0,n.jsx)(i.code,{children:"_Dereified"}),"[]"]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-normalizations",children:"normalizations"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"normalizations"}),": ",(0,n.jsx)(i.code,{children:"Object"})]}),(0,n.jsx)(i.h4,{id:"index-signature-1",children:"Index signature"}),(0,n.jsxs)(i.p,{children:["\u25aa [key: ",(0,n.jsx)(i.code,{children:"Role"}),"]: ",(0,n.jsx)(i.code,{children:"Role"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-reifications",children:"reifications"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"reifications"}),": ",(0,n.jsx)(i.code,{children:"Object"})]}),(0,n.jsx)(i.h4,{id:"index-signature-2",children:"Index signature"}),(0,n.jsxs)(i.p,{children:["\u25aa [key: ",(0,n.jsx)(i.code,{children:"Role"}),"]: ",(0,n.jsx)(i.code,{children:"_Reified"}),"[]"]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-roles",children:"roles"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"roles"}),": ",(0,n.jsx)(i.code,{children:"Object"})]}),(0,n.jsx)(i.h4,{id:"index-signature-3",children:"Index signature"}),(0,n.jsxs)(i.p,{children:["\u25aa [key: ",(0,n.jsx)(i.code,{children:"Role"}),"]: ",(0,n.jsx)(i.code,{children:"any"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-topRole",children:"topRole"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"topRole"}),": ",(0,n.jsx)(i.code,{children:"string"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-topVariable",children:"topVariable"}),(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"topVariable"}),": ",(0,n.jsx)(i.code,{children:"string"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-alphanumericOrder",children:"alphanumericOrder"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"alphanumericOrder"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): [",(0,n.jsx)(i.code,{children:"string"}),", ",(0,n.jsx)(i.code,{children:"number"}),"]"]}),(0,n.jsx)(i.p,{children:"Role sorting key for alphanumeric order."}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-canonicalOrder",children:"canonicalOrder"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"canonicalOrder"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): [",(0,n.jsx)(i.code,{children:"boolean"}),", [",(0,n.jsx)(i.code,{children:"string"}),", ",(0,n.jsx)(i.code,{children:"number"}),"]]"]}),(0,n.jsx)(i.p,{children:"Role sorting key that finds a canonical order."}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-canonicalize",children:"canonicalize"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"canonicalize"}),"(",(0,n.jsx)(i.code,{children:"triple"}),"): ",(0,n.jsx)(i.code,{children:"BasicTriple"})]}),(0,n.jsxs)(i.p,{children:["Canonicalize ",(0,n.jsx)(i.code,{children:"triple"}),"."]}),(0,n.jsxs)(i.p,{children:["The role in the triple is canonicalized following the procedure\ndescribed in the ",(0,n.jsx)(i.code,{children:"canonicalizeRole"})," method. Unlike a method such as ",(0,n.jsx)(i.code,{children:"invert"}),",\nthis function does not swap the source and target of ",(0,n.jsx)(i.code,{children:"triple"}),"."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-canonicalizeRole",children:"canonicalizeRole"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"canonicalizeRole"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): ",(0,n.jsx)(i.code,{children:"string"})]}),(0,n.jsxs)(i.p,{children:["Canonicalize ",(0,n.jsx)(i.code,{children:"role"}),"."]}),(0,n.jsx)(i.p,{children:"Role canonicalization will perform the following actions:"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Ensure the role starts with ",(0,n.jsx)(i.code,{children:"':'"})]}),"\n",(0,n.jsxs)(i.li,{children:["Normalize multiple inversions (e.g., ",(0,n.jsx)(i.code,{children:"ARG0-of-of"})," becomes ",(0,n.jsx)(i.code,{children:"ARG0"}),"),\nbut it does not change the direction of the role"]}),"\n",(0,n.jsx)(i.li,{children:"Replace the resulting role with a normalized form if one is\ndefined in the model"}),"\n"]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-deinvert",children:"deinvert"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"deinvert"}),"(",(0,n.jsx)(i.code,{children:"triple"}),"): ",(0,n.jsx)(i.code,{children:"BasicTriple"})]}),(0,n.jsxs)(i.p,{children:["De-invert ",(0,n.jsx)(i.code,{children:"triple"})," if it is inverted."]}),(0,n.jsxs)(i.p,{children:["Unlike a method such as ",(0,n.jsx)(i.code,{children:"invert"}),", this only inverts a triple if the model\nconsiders it to be already inverted, otherwise it is left\nunchanged. Unlike a method such as ",(0,n.jsx)(i.code,{children:"canonicalize"}),", this will not normalize\nmultiple inversions or replace the role with a normalized\nform."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-dereify",children:"dereify"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"dereify"}),"(",(0,n.jsx)(i.code,{children:"instanceTriple"}),", ",(0,n.jsx)(i.code,{children:"sourceTriple"}),", ",(0,n.jsx)(i.code,{children:"targetTriple"}),"): ",(0,n.jsx)(i.code,{children:"BasicTriple"})]}),(0,n.jsx)(i.p,{children:"Return the triple that dereifies the three argument triples."}),(0,n.jsxs)(i.p,{children:["If the target of ",(0,n.jsx)(i.code,{children:"instanceTriple"})," does not have a defined\ndereification, or if the roles of ",(0,n.jsx)(i.code,{children:"sourceTriple"})," and\n",(0,n.jsx)(i.code,{children:"targetTriple"})," do not match those for the dereification of\nthe concept, a ",(0,n.jsx)(i.code,{children:"ModelError"})," exception is raised. A ",(0,n.jsx)(i.code,{children:"ValueError"})," is raised if\n",(0,n.jsx)(i.code,{children:"instanceTriple"})," is not an instance triple or any triple does not have the\nsame source variable as the others."]}),(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Throws"})})}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"If dereification conditions are not met."}),"\n"]}),(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Throws"})})}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["If ",(0,n.jsx)(i.code,{children:"instanceTriple"})," is not valid or if any triple has a different source."]}),"\n"]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-equals",children:"equals"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"equals"}),"(",(0,n.jsx)(i.code,{children:"other"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-errors",children:"errors"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"errors"}),"(",(0,n.jsx)(i.code,{children:"graph"}),"): ",(0,n.jsx)(i.code,{children:"Object"})]}),(0,n.jsxs)(i.p,{children:["Return a description of model errors detected in ",(0,n.jsx)(i.code,{children:"graph"}),"."]}),(0,n.jsxs)(i.p,{children:["The description is an object mapping a context to a list of\nerrors. A context is a triple if the error is relevant for the\ntriple, or ",(0,n.jsx)(i.code,{children:"null"})," for general graph errors."]}),(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Example"})})}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"import { model } from 'penman-js/models/amr';\nimport { Graph } from 'penman-js/graph';\n\nconst g = new Graph([\n  ['a', ':instance', 'alpha'],\n  ['a', ':foo', 'bar'],\n  ['b', ':instance', 'beta']\n]);\n\nfor (const [context, errors] of Object.entries(model.errors(g))) {\n  console.log(context, errors);\n}\n\n// ['a', ':foo', 'bar'] ['invalid role']\n// ['b', ':instance', 'beta'] ['unreachable']\n"})}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-hasRole",children:"hasRole"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"hasRole"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),(0,n.jsxs)(i.p,{children:["Return ",(0,n.jsx)(i.code,{children:"true"})," if ",(0,n.jsx)(i.code,{children:"role"})," is defined by the model."]}),(0,n.jsxs)(i.p,{children:["If ",(0,n.jsx)(i.code,{children:"role"})," is not in the model but a single deinversion of\n",(0,n.jsx)(i.code,{children:"role"})," is in the model, then ",(0,n.jsx)(i.code,{children:"true"})," is returned. Otherwise,\n",(0,n.jsx)(i.code,{children:"false"})," is returned, even if a method like ",(0,n.jsx)(i.code,{children:"canonicalizeRole"}),"\ncould return a valid role."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-invert",children:"invert"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"invert"}),"(",(0,n.jsx)(i.code,{children:"triple"}),"): ",(0,n.jsx)(i.code,{children:"BasicTriple"})]}),(0,n.jsxs)(i.p,{children:["Invert ",(0,n.jsx)(i.code,{children:"triple"}),"."]}),(0,n.jsxs)(i.p,{children:["This will invert or deinvert a triple regardless of its\ncurrent state. A method like ",(0,n.jsx)(i.code,{children:"deinvert"})," will deinvert a triple only if\nit is already inverted. Unlike a method like ",(0,n.jsx)(i.code,{children:"canonicalize"}),", this will\nnot perform multiple inversions or replace the role with a\nnormalized form."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-invertRole",children:"invertRole"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"invertRole"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): ",(0,n.jsx)(i.code,{children:"string"})]}),(0,n.jsxs)(i.p,{children:["Invert ",(0,n.jsx)(i.code,{children:"role"}),"."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-isConceptDereifiable",children:"isConceptDereifiable"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"isConceptDereifiable"}),"(",(0,n.jsx)(i.code,{children:"concept"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),(0,n.jsxs)(i.p,{children:["Return ",(0,n.jsx)(i.code,{children:"True"})," if ",(0,n.jsx)(i.em,{children:"concept"})," can be dereified."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-isRoleInverted",children:"isRoleInverted"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"isRoleInverted"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),(0,n.jsxs)(i.p,{children:["Return ",(0,n.jsx)(i.code,{children:"true"})," if ",(0,n.jsx)(i.code,{children:"role"})," is inverted."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-isRoleReifiable",children:"isRoleReifiable"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"isRoleReifiable"}),"(",(0,n.jsx)(i.code,{children:"role"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),(0,n.jsxs)(i.p,{children:["Return ",(0,n.jsx)(i.code,{children:"true"})," if ",(0,n.jsx)(i.code,{children:"role"})," can be reified."]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-originalOrder",children:"originalOrder"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"originalOrder"}),"(",(0,n.jsx)(i.code,{children:"_role"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),(0,n.jsx)(i.p,{children:"Role sorting key that does not change the order."}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-randomOrder",children:"randomOrder"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"randomOrder"}),"(",(0,n.jsx)(i.code,{children:"_role"}),"): ",(0,n.jsx)(i.code,{children:"number"})]}),(0,n.jsx)(i.p,{children:"Role sorting key that randomizes the order."}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-reify",children:"reify"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"reify"}),"(",(0,n.jsx)(i.code,{children:"triple"}),", ",(0,n.jsx)(i.code,{children:"variables?"}),"): ",(0,n.jsx)(i.code,{children:"_Reification"})]}),(0,n.jsxs)(i.p,{children:["Return the three triples that reify ",(0,n.jsx)(i.code,{children:"triple"}),"."]}),(0,n.jsxs)(i.p,{children:["Note that, unless ",(0,n.jsx)(i.code,{children:"variables"})," is provided, the node variable\nfor the reified node is not necessarily valid for the target\ngraph. When incorporating the reified triples, this variable\nshould then be replaced."]}),(0,n.jsxs)(i.p,{children:["If the role of ",(0,n.jsx)(i.code,{children:"triple"})," does not have a defined reification,\na ",(0,n.jsx)(i.code,{children:"ModelError"})," exception is raised."]}),(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Throws"})})}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["If the role of ",(0,n.jsx)(i.code,{children:"triple"})," does not have a defined reification."]}),"\n"]}),(0,n.jsx)(i.hr,{}),(0,n.jsx)(i.h3,{id:"model-fromDict",children:"fromDict"}),(0,n.jsxs)(i.p,{children:["\u25b8 ",(0,n.jsx)(i.strong,{children:"fromDict"}),"(",(0,n.jsx)(i.code,{children:"d"}),"): ",(0,n.jsx)(i.code,{children:"Model"})]}),(0,n.jsx)(i.p,{children:"Instantiate a model from a dictionary."})]})]})}function s(e={}){const{wrapper:i}={...(0,l.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}const o={},c="model",t={id:"api.model",title:"model",description:"",source:"@site/docs/api.model.mdx",sourceDirName:".",slug:"/api.model",permalink:"/penman-js/api.model",draft:!1,unlisted:!1,editUrl:"https://github.com/chanind/penman-js/tree/main/docs/docs/api.model.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"layout",permalink:"/penman-js/api.layout"},next:{title:"surface",permalink:"/penman-js/api.surface"}},h={},a=[{value:"Class: Model",id:"class-model",level:2},{value:"constructor",id:"model-constructor",level:3},{value:"conceptRole",id:"model-conceptRole",level:3},{value:"dereifications",id:"model-dereifications",level:3},{value:"Index signature",id:"index-signature",level:4},{value:"normalizations",id:"model-normalizations",level:3},{value:"Index signature",id:"index-signature-1",level:4},{value:"reifications",id:"model-reifications",level:3},{value:"Index signature",id:"index-signature-2",level:4},{value:"roles",id:"model-roles",level:3},{value:"Index signature",id:"index-signature-3",level:4},{value:"topRole",id:"model-topRole",level:3},{value:"topVariable",id:"model-topVariable",level:3},{value:"alphanumericOrder",id:"model-alphanumericOrder",level:3},{value:"canonicalOrder",id:"model-canonicalOrder",level:3},{value:"canonicalize",id:"model-canonicalize",level:3},{value:"canonicalizeRole",id:"model-canonicalizeRole",level:3},{value:"deinvert",id:"model-deinvert",level:3},{value:"dereify",id:"model-dereify",level:3},{value:"equals",id:"model-equals",level:3},{value:"errors",id:"model-errors",level:3},{value:"hasRole",id:"model-hasRole",level:3},{value:"invert",id:"model-invert",level:3},{value:"invertRole",id:"model-invertRole",level:3},{value:"isConceptDereifiable",id:"model-isConceptDereifiable",level:3},{value:"isRoleInverted",id:"model-isRoleInverted",level:3},{value:"isRoleReifiable",id:"model-isRoleReifiable",level:3},{value:"originalOrder",id:"model-originalOrder",level:3},{value:"randomOrder",id:"model-randomOrder",level:3},{value:"reify",id:"model-reify",level:3},{value:"fromDict",id:"model-fromDict",level:3}];function x(e){const i={h1:"h1",...(0,l.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"model",children:"model"}),"\n",(0,n.jsx)(s,{})]})}function j(e={}){const{wrapper:i}={...(0,l.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}},1151:(e,i,r)=>{r.d(i,{Z:()=>o,a:()=>s});var n=r(7294);const l={},d=n.createContext(l);function s(e){const i=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);