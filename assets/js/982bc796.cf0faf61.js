"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[478],{5848:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>x,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>h,toc:()=>j});var s=r(5893),t=r(1151);function i(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"class-tree",children:"Class: Tree"}),"\n",(0,s.jsx)(n.p,{children:"A tree structure."}),"\n",(0,s.jsx)(n.p,{children:"A tree is essentially a node that contains other nodes, but this\nTree class is useful to contain any metadata and to provide\ntree-based methods."}),"\n",(0,s.jsxs)("div",{class:"padding-left--lg",children:[(0,s.jsx)(n.h3,{id:"tree-constructor",children:"constructor"}),(0,s.jsxs)(n.p,{children:["\u2022 ",(0,s.jsx)(n.strong,{children:"new Tree"}),"(",(0,s.jsx)(n.code,{children:"node"}),", ",(0,s.jsx)(n.code,{children:"metadata?"}),"): ",(0,s.jsx)(n.code,{children:"Tree"})]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-metadata",children:"metadata"}),(0,s.jsxs)(n.p,{children:["\u2022 ",(0,s.jsx)(n.strong,{children:"metadata"}),": ",(0,s.jsx)(n.code,{children:"Object"})]}),(0,s.jsx)(n.h4,{id:"index-signature",children:"Index signature"}),(0,s.jsxs)(n.p,{children:["\u25aa [key: ",(0,s.jsx)(n.code,{children:"string"}),"]: ",(0,s.jsx)(n.code,{children:"string"})]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-node",children:"node"}),(0,s.jsxs)(n.p,{children:["\u2022 ",(0,s.jsx)(n.strong,{children:"node"}),": ",(0,s.jsx)(n.code,{children:"Node"})]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-equals",children:"equals"}),(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"equals"}),"(",(0,s.jsx)(n.code,{children:"other"}),"): ",(0,s.jsx)(n.code,{children:"boolean"})]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-nodes",children:"nodes"}),(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"nodes"}),"(): ",(0,s.jsx)(n.code,{children:"Node"}),"[]"]}),(0,s.jsx)(n.p,{children:"Return the nodes in the tree as a flat list."}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-repr",children:"repr"}),(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"repr"}),"(): ",(0,s.jsx)(n.code,{children:"string"})]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-resetVariables",children:"resetVariables"}),(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"resetVariables"}),"(",(0,s.jsx)(n.code,{children:"fmt?"}),"): ",(0,s.jsx)(n.code,{children:"void"})]}),(0,s.jsxs)(n.p,{children:["Recreate node variables formatted using ",(0,s.jsx)(n.code,{children:"fmt"}),"."]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"fmt"})," string can be formatted with the following values:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefix"}),": first alphabetic character in the node's concept"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"i"}),": 0-based index of the current occurrence of the prefix"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"j"}),": 1-based index starting from the second occurrence"]}),"\n"]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-toString",children:"toString"}),(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"toString"}),"(): ",(0,s.jsx)(n.code,{children:"string"})]}),(0,s.jsx)(n.hr,{}),(0,s.jsx)(n.h3,{id:"tree-walk",children:"walk"}),(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"walk"}),"(): ",(0,s.jsx)(n.code,{children:"Generator"}),"<",(0,s.jsx)(n.code,{children:"_Step"}),", ",(0,s.jsx)(n.code,{children:"any"}),", ",(0,s.jsx)(n.code,{children:"unknown"}),">"]}),(0,s.jsx)(n.p,{children:"Iterate over branches in the tree."}),(0,s.jsxs)(n.p,{children:["This function yields pairs of (",(0,s.jsx)(n.code,{children:"path"}),", ",(0,s.jsx)(n.code,{children:"branch"}),") where each\n",(0,s.jsx)(n.code,{children:"path"})," is an array of 0-based indices of branches to get to\n",(0,s.jsx)(n.code,{children:"branch"}),". For example, the path [2, 0] is the concept branch\n",(0,s.jsx)(n.code,{children:"('/', 'bark-01')"})," in the tree for the following PENMAN\nstring, traversing first to the third (index 2) branch of the\ntop node, then to the first (index 0) branch of that node:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"(t / try-01\n    :ARG0 (d / dog)\n    :ARG1 (b / bark-01\n            :ARG0 d))\n"})}),(0,s.jsxs)(n.p,{children:["The (",(0,s.jsx)(n.code,{children:"path"}),", ",(0,s.jsx)(n.code,{children:"branch"}),") pairs are yielded in depth-first order\nof the tree traversal."]})]})]})}function c(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"function-isatomic",children:"Function: isAtomic"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"isAtomic"}),"(",(0,s.jsx)(n.code,{children:"x"}),"): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.p,{children:["Return ",(0,s.jsx)(n.code,{children:"true"})," if ",(0,s.jsx)(n.code,{children:"x"})," is a valid atomic value."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Example"})})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"console.log(isAtomic('a')); // Outputs: true\nconsole.log(isAtomic(null)); // Outputs: true\nconsole.log(isAtomic(3.14)); // Outputs: true\nconsole.log(isAtomic(['a', [['/', 'alpha']]])); // Outputs: false\n"})})]})}function o(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}const l={},a="tree",h={id:"api.tree",title:"tree",description:"Definitions of tree structures.",source:"@site/docs/api.tree.mdx",sourceDirName:".",slug:"/api.tree",permalink:"/penman-js/api.tree",draft:!1,unlisted:!1,editUrl:"https://github.com/chanind/penman-js/tree/main/docs/docs/api.tree.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"transform",permalink:"/penman-js/api.transform"}},x={},j=[{value:"Class: Tree",id:"class-tree",level:2},{value:"constructor",id:"tree-constructor",level:3},{value:"metadata",id:"tree-metadata",level:3},{value:"Index signature",id:"index-signature",level:4},{value:"node",id:"tree-node",level:3},{value:"equals",id:"tree-equals",level:3},{value:"nodes",id:"tree-nodes",level:3},{value:"repr",id:"tree-repr",level:3},{value:"resetVariables",id:"tree-resetVariables",level:3},{value:"toString",id:"tree-toString",level:3},{value:"walk",id:"tree-walk",level:3},{value:"Function: isAtomic",id:"function-isatomic",level:2}];function u(e){const n={h1:"h1",hr:"hr",p:"p",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tree",children:"tree"}),"\n",(0,s.jsx)(n.p,{children:"Definitions of tree structures."}),"\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(o,{})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>c});var s=r(7294);const t={},i=s.createContext(t);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);