"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[239],{4363:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=t(5893),o=t(1151);const r={},a="Quick start",c={id:"quick-start",title:"Quick start",description:"Installation",source:"@site/docs/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/penman-js/quick-start",draft:!1,unlisted:!1,editUrl:"https://github.com/chanind/penman-js/tree/main/docs/docs/quick-start.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Penman JS",permalink:"/penman-js/"},next:{title:"Trees and graphs",permalink:"/penman-js/trees-graphs-epigraphs"}},i={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic usage",id:"basic-usage",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"quick-start",children:"Quick start"}),"\n",(0,s.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(e.p,{children:"Install the library from NPM"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"npm install penman-js\n"})}),"\n",(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,s.jsxs)(e.p,{children:["The most faithful representation of AMR text in the library is the ",(0,s.jsx)(e.code,{children:"Tree"})," class. The ",(0,s.jsx)(e.code,{children:"parse"})," function turns an AMR text string into a ",(0,s.jsx)(e.code,{children:"Tree"}),", and ",(0,s.jsx)(e.code,{children:"format"})," does the reverse, turning a ",(0,s.jsx)(e.code,{children:"Tree"})," back into a string."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import { parse, format } from 'penman-js';\n\nconst t = penman.parse('(w / want-01 :ARG0 (b / boy) :ARG1 (g / go :ARG0 b))');\nconst [variable, branches] = t.node;\nconsole.log(variable); // ouput: 'w'\nconsole.log(branches.length); // output: 3\nconst [role, target] = branches[2];\nconsole.log(role); // output: ':ARG1'\nconsole.log(format(target));\n// (g / go\n//     :ARG0 b)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Users wanting to interact with graphs might find the ",(0,s.jsx)(e.code,{children:"decode"})," and\n",(0,s.jsx)(e.code,{children:"encode"})," functions a good place to start."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"import { encode, decode } from 'penman-js';\nconst g = penman.decode('(w / want-01 :ARG0 (b / boy) :ARG1 (g / go :ARG0 b))');\nconsole.log(g.top);\n// 'w'\nconsole.log(g.triples.length);\n// 6\nconsole.log(g.instances().map((instance) => instance[2]));\n// ['want-01', 'boy', 'go']\n\n// JS doesn't support keyword parameters, so `undefined` must be passed for optional params\nconsole.log(encode(g, undefined, undefined, 'b'));\n// (b / boy\n//    :ARG0-of (w / want-01\n//                :ARG1 (g / go\n//                         :ARG0 b)))\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"decode"})," and ",(0,s.jsx)(e.code,{children:"encode"})," functions work with one PENMAN\ngraph. The ",(0,s.jsx)(e.code,{children:"load"})," and ",(0,s.jsx)(e.code,{children:"dump"})," functions work with\ncollections of graphs."]})]})}function p(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>c,a:()=>a});var s=t(7294);const o={},r=s.createContext(o);function a(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);