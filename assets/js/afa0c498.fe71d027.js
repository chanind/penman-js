"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[683],{3458:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>h,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=n(5893),a=n(1151);const s={},i="Trees and graphs",o={id:"trees-graphs-epigraphs",title:"Trees and graphs",description:"On the surface, the structures encoded in a PENMAN AMR string are a tree,",source:"@site/docs/trees-graphs-epigraphs.md",sourceDirName:".",slug:"/trees-graphs-epigraphs",permalink:"/penman-js/trees-graphs-epigraphs",draft:!1,unlisted:!1,editUrl:"https://github.com/chanind/penman-js/tree/main/docs/docs/trees-graphs-epigraphs.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Quick start",permalink:"/penman-js/quick-start"},next:{title:"codec",permalink:"/penman-js/api.codec"}},h={},c=[];function d(e){const r={a:"a",code:"code",em:"em",h1:"h1",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"trees-and-graphs",children:"Trees and graphs"}),"\n",(0,t.jsxs)(r.p,{children:["On the surface, the structures encoded in a PENMAN AMR string are a tree,\nand only by resolving repeated\nnode identifiers (variables) as reentrancies does the actual graph\nbecome accessible. The Penman library thus accommodates the three\nstages of a structure: the linear PENMAN string, the surface\n",(0,t.jsx)(r.a,{href:"api.tree#class-tree",children:"Tree"}),", and the pure ",(0,t.jsx)(r.a,{href:"api.graph#class-graph",children:"Graph"}),".\nGoing from a string to a tree is called\n",(0,t.jsx)(r.strong,{children:"parsing"}),", and from a tree to a graph is ",(0,t.jsx)(r.strong,{children:"interpretation"}),", while\nthe whole process (string to graph) is called ",(0,t.jsx)(r.strong,{children:"decoding"}),". Going from\na graph to a tree is called ",(0,t.jsx)(r.strong,{children:"configuration"}),", and from a tree to a\nstring is ",(0,t.jsx)(r.strong,{children:"formatting"}),", while the whole process is called\n",(0,t.jsx)(r.strong,{children:"encoding"}),". These processes are illustrated by the following figure\n(concepts are not shown on the tree and graph for simplicity):"]}),"\n",(0,t.jsx)("div",{class:"light-image-bg",children:(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"The three stages of PENMAN structure",src:n(9162).Z+"",width:"797",height:"399"})})}),"\n",(0,t.jsxs)(r.p,{children:["Conversion from a PENMAN string to a ",(0,t.jsx)(r.code,{children:"Tree"}),", and\nvice versa, is straightforward and lossless. Conversion to a\n",(0,t.jsx)(r.code,{children:"Graph"}),", however, is potentially lossy as the\nsame graph can be represented by different trees. For example, the\ngraph in the figure above could be serialized to any of these PENMAN\nstrings."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"  (a / alpha                (a / alpha                     (a / alpha\n     :ARG0 (b / beta)          :ARG0 (b / beta                :ARG0 (b / beta\n     :ARG0-of (g / gamma          :ARG1-of (g / gamma))          :ARG1-of (g / gamma\n        :ARG1 b))              :ARG0-of g)                          :ARG0 a)))\n"})}),"\n",(0,t.jsx)(r.p,{children:"Even more serializations are possible if you do not require the first\noccurrence of a variable to define the node (with its node label\n(concept) and outgoing edges), or if you allow other nodes to be the\ntop."}),"\n",(0,t.jsxs)(r.p,{children:["The Penman library therefore introduces the concept of the\n",(0,t.jsx)(r.strong,{children:"epigraph"})," (not to be confused with other senses of ",(0,t.jsx)(r.em,{children:"epigraph"}),", such\nas an inscription on a building or a passage at the beginning of a\nbook), which is information on top of the graph that instructs the\n",(0,t.jsx)(r.a,{href:"api.codec#class-penmancodec",children:"codec"})," how the graph should be\nserialized. The epigraph is thus analagous to the idea of the\n",(0,t.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Epigenome",children:"epigenome"}),": epigenetic\nmarkers controls how genes are expressed in an individual as the\nepigraphical markers control how graph triples are expressed in a tree\nor string. Separating the graph and the epigraph thus allow the graph\nto be a pure representation of the triples expressed in a PENMAN\nserialization without losing information about the surface form."]}),"\n",(0,t.jsxs)(r.p,{children:["There are currently two kinds of epigraphical markers: layout markers\nand surface alignment markers. Surface alignment markers are parsed\nfrom the string and stored in the tree then propagated to the graph\nupon interpretation. Layout markers are created when the tree is\ninterpreted into a graph. When an edge goes to a new node and not a\nconstant or variable, a ",(0,t.jsx)(r.code,{children:"Push"})," marker is\ninserted. When a node ends, a ",(0,t.jsx)(r.code,{children:"POP"})," marker is\ninserted. With these markers, and the ordering of triples, the graph\ncan be configured to a specific tree structure."]})]})}function p(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},9162:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/representations-b3cf7af6c8d69a52585162558318e010.png"},1151:(e,r,n)=>{n.d(r,{Z:()=>o,a:()=>i});var t=n(7294);const a={},s=t.createContext(a);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);