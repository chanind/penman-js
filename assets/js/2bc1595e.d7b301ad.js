"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[613],{4958:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>F,contentTitle:()=>N,default:()=>S,frontMatter:()=>y,metadata:()=>O,toc:()=>T});var s=t(5893),o=t(1151);function r(n){const e={code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"variable-float",children:"Variable: FLOAT"}),"\n",(0,s.jsxs)(e.p,{children:["\u2022 ",(0,s.jsx)(e.code,{children:"Const"})," ",(0,s.jsx)(e.strong,{children:"FLOAT"}),": ",(0,s.jsx)(e.code,{children:"FLOAT"})," = ",(0,s.jsx)(e.code,{children:"Type.FLOAT"})]})]})}function c(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(r,{...n})}):r(n)}function i(n){const e={code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"variable-integer",children:"Variable: INTEGER"}),"\n",(0,s.jsxs)(e.p,{children:["\u2022 ",(0,s.jsx)(e.code,{children:"Const"})," ",(0,s.jsx)(e.strong,{children:"INTEGER"}),": ",(0,s.jsx)(e.code,{children:"INTEGER"})," = ",(0,s.jsx)(e.code,{children:"Type.INTEGER"})]})]})}function l(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(i,{...n})}):i(n)}function a(n){const e={code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"variable-null",children:"Variable: NULL"}),"\n",(0,s.jsxs)(e.p,{children:["\u2022 ",(0,s.jsx)(e.code,{children:"Const"})," ",(0,s.jsx)(e.strong,{children:"NULL"}),": ",(0,s.jsx)(e.code,{children:"NULL"})," = ",(0,s.jsx)(e.code,{children:"Type.NULL"})]})]})}function d(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(a,{...n})}):a(n)}function u(n){const e={code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"variable-string",children:"Variable: STRING"}),"\n",(0,s.jsxs)(e.p,{children:["\u2022 ",(0,s.jsx)(e.code,{children:"Const"})," ",(0,s.jsx)(e.strong,{children:"STRING"}),": ",(0,s.jsx)(e.code,{children:"STRING"})," = ",(0,s.jsx)(e.code,{children:"Type.STRING"})]})]})}function p(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}function h(n){const e={code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"variable-symbol",children:"Variable: SYMBOL"}),"\n",(0,s.jsxs)(e.p,{children:["\u2022 ",(0,s.jsx)(e.code,{children:"Const"})," ",(0,s.jsx)(e.strong,{children:"SYMBOL"}),": ",(0,s.jsx)(e.code,{children:"SYMBOL"})," = ",(0,s.jsx)(e.code,{children:"Type.SYMBOL"})]})]})}function x(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}function j(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"function-quote",children:"Function: quote"}),"\n",(0,s.jsxs)(e.p,{children:["\u25b8 ",(0,s.jsx)(e.strong,{children:"quote"}),"(",(0,s.jsx)(e.code,{children:"constant"}),"): ",(0,s.jsx)(e.code,{children:"string"})]}),"\n",(0,s.jsxs)(e.p,{children:["Return ",(0,s.jsx)(e.code,{children:"constant"})," as a quoted string."]}),"\n",(0,s.jsxs)(e.p,{children:["If ",(0,s.jsx)(e.code,{children:"constant"})," is ",(0,s.jsx)(e.code,{children:"null"}),", this function returns an empty string\nconstant (",(0,s.jsx)(e.code,{children:"'\"\"'"}),"). All other types are cast to a string and\nquoted."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Example"})})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { quote } from 'penman-js/constant';\n\nconsole.log(quote(null)); // Outputs: '\"\"'\nconsole.log(quote('')); // Outputs: '\"\"'\nconsole.log(quote('foo')); // Outputs: '\"foo\"'\nconsole.log(quote('\"foo\"')); // Outputs: '\"\\\\\"foo\\\\\"\"'\nconsole.log(quote(1)); // Outputs: '\"1\"'\nconsole.log(quote(1.5)); // Outputs: '\"1.5\"'\n"})})]})}function g(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(j,{...n})}):j(n)}function m(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"function-evaluate",children:"Function: evaluate"}),"\n",(0,s.jsxs)(e.p,{children:["\u25b8 ",(0,s.jsx)(e.strong,{children:"evaluate"}),"(",(0,s.jsx)(e.code,{children:"constantString"}),"): ",(0,s.jsx)(e.code,{children:"Constant"})]}),"\n",(0,s.jsxs)(e.p,{children:["Evaluate and return the value of ",(0,s.jsx)(e.code,{children:"constantString"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["If ",(0,s.jsx)(e.code,{children:"constantString"})," is ",(0,s.jsx)(e.code,{children:"null"})," or an empty symbol (",(0,s.jsx)(e.code,{children:"''"}),"), this\nfunction returns ",(0,s.jsx)(e.code,{children:"null"}),". An empty string constant (",(0,s.jsx)(e.code,{children:"'\"\"'"}),") returns an empty string (",(0,s.jsx)(e.code,{children:"''"}),").\nSymbols are returned unchanged, while strings get quotes removed and escape sequences unescaped.\nNote that this means it is impossible to recover the original type of\nstrings and symbols once they have been evaluated. For integer and\nfloat constants, this function returns the equivalent JavaScript\n",(0,s.jsx)(e.code,{children:"Number"})," object."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Example"})})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { evaluate } from 'penman-js/constant';\n\nconsole.log(evaluate('-')); // Outputs: '-'\nconsole.log(evaluate('\"foo\"')); // Outputs: 'foo'\nconsole.log(evaluate('1')); // Outputs: 1\nconsole.log(evaluate('1.2')); // Outputs: 1.2\nconsole.log(evaluate('') === null); // Outputs: true\n"})})]})}function f(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(m,{...n})}):m(n)}function v(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"function-type",children:"Function: type"}),"\n",(0,s.jsxs)(e.p,{children:["\u25b8 ",(0,s.jsx)(e.strong,{children:"type"}),"(",(0,s.jsx)(e.code,{children:"constant_string"}),"): ",(0,s.jsx)(e.code,{children:"Type"})]}),"\n",(0,s.jsxs)(e.p,{children:["Return the type of constant encoded by ",(0,s.jsx)(e.code,{children:"constantString"}),"."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Example"})})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"import { type } from 'penman-js';\n\nconsole.log(type('-')); // Outputs: 'Symbol'\nconsole.log(type('\"foo\"')); // Outputs: 'String'\nconsole.log(type('1')); // Outputs: 'Integer'\nconsole.log(type('1.2')); // Outputs: 'Float'\nconsole.log(type('')); // Outputs: 'Null'\n"})})]})}function b(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(v,{...n})}):v(n)}const y={},N="constant",O={id:"api.constant",title:"constant",description:"Functions for working with constant values.",source:"@site/docs/api.constant.mdx",sourceDirName:".",slug:"/api.constant",permalink:"/penman-js/api.constant",draft:!1,unlisted:!1,editUrl:"https://github.com/chanind/penman-js/tree/main/docs/docs/api.constant.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"codec",permalink:"/penman-js/api.codec"},next:{title:"exceptions",permalink:"/penman-js/api.exceptions"}},F={},T=[{value:"Function: quote",id:"function-quote",level:2},{value:"Function: evaluate",id:"function-evaluate",level:2},{value:"Function: type",id:"function-type",level:2},{value:"Variable: FLOAT",id:"variable-float",level:2},{value:"Variable: INTEGER",id:"variable-integer",level:2},{value:"Variable: NULL",id:"variable-null",level:2},{value:"Variable: STRING",id:"variable-string",level:2},{value:"Variable: SYMBOL",id:"variable-symbol",level:2}];function L(n){const e={code:"code",h1:"h1",hr:"hr",p:"p",...(0,o.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"constant",children:"constant"}),"\n",(0,s.jsx)(e.p,{children:"Functions for working with constant values."}),"\n",(0,s.jsxs)(e.p,{children:["When a PENMAN string is parsed to a tree or a graph, constant values\nare left as strings or, if the value is missing, as ",(0,s.jsx)(e.code,{children:"null"}),'. Penman\nnevertheless recognizes four datatypes commonly used in PENMAN data:\nintegers, floats, strings, and symbols. A fifth type, called a "null"\nvalue, is used when an attribute is missing its target, but aside from\nrobustness measures it is not a supported datatype.']}),"\n",(0,s.jsx)(g,{}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(f,{}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(b,{}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(p,{}),"\n",(0,s.jsx)(x,{})]})}function S(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(L,{...n})}):L(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>c});var s=t(7294);const o={},r=s.createContext(o);function c(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);