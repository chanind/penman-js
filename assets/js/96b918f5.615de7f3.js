"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[40],{5078:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>v,contentTitle:()=>u,default:()=>y,frontMatter:()=>g,metadata:()=>b,toc:()=>m});var s=n(5893),i=n(1151);function t(e){const r={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"class-graph",children:"Class: Graph"}),"\n",(0,s.jsx)(r.p,{children:"Represents a basic class for modeling a rooted, directed acyclic graph."}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.code,{children:"Graph"})," is defined by a list of triples, which can be divided into\ntwo parts: a list of graph edges where both the source and target\nare variables (node identifiers), and a list of node attributes\nwhere only the source is a variable and the target is a constant.\nThe raw triples are available via the ",(0,s.jsx)(r.code,{children:"triples"})," property, while the\n",(0,s.jsx)(r.code,{children:"instances"}),", ",(0,s.jsx)(r.code,{children:"edges"}),", and ",(0,s.jsx)(r.code,{children:"attributes"})," methods return only those that\nare concept relations, relations between nodes, or relations between\na node and a constant, respectively."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"Example"})})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"import { Graph } from 'penman-js';\n\nconst graph = new Graph([\n  ['b', ':instance', 'bark-01'],\n  ['d', ':instance', 'dog'],\n  ['b', ':ARG0', 'd']\n]);\n"})}),"\n",(0,s.jsxs)("div",{class:"padding-left--lg",children:[(0,s.jsx)(r.h3,{id:"graph-constructor",children:"constructor"}),(0,s.jsxs)(r.p,{children:["\u2022 ",(0,s.jsx)(r.strong,{children:"new Graph"}),"(",(0,s.jsx)(r.code,{children:"triples?"}),", ",(0,s.jsx)(r.code,{children:"options?"}),"): ",(0,s.jsx)(r.code,{children:"Graph"})]}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"options"})," consists of the following:"]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"top"}),": The variable of the top node; if unspecified, the source of the first triple is used."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"epidata"}),": A mapping of triples to epigraphical markers."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"metadata"}),": A mapping of metadata types to descriptions."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-epidata",children:"epidata"}),(0,s.jsxs)(r.p,{children:["\u2022 ",(0,s.jsx)(r.strong,{children:"epidata"}),": ",(0,s.jsx)(r.code,{children:"EpidataMap"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-metadata",children:"metadata"}),(0,s.jsxs)(r.p,{children:["\u2022 ",(0,s.jsx)(r.strong,{children:"metadata"}),": ",(0,s.jsx)(r.code,{children:"Record"}),"<",(0,s.jsx)(r.code,{children:"string"}),", ",(0,s.jsx)(r.code,{children:"string"}),">"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-triples",children:"triples"}),(0,s.jsxs)(r.p,{children:["\u2022 ",(0,s.jsx)(r.strong,{children:"triples"}),": ",(0,s.jsx)(r.code,{children:"Triples"})," = ",(0,s.jsx)(r.code,{children:"[]"})]}),(0,s.jsxs)(r.p,{children:["An iterable of triples (either ",(0,s.jsx)(r.code,{children:"Triple"})," objects or 3-tuples)."]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-top",children:"top"}),(0,s.jsxs)(r.p,{children:["\u2022 ",(0,s.jsx)(r.code,{children:"get"})," ",(0,s.jsx)(r.strong,{children:"top"}),"(): ",(0,s.jsx)(r.code,{children:"null"})," | ",(0,s.jsx)(r.code,{children:"string"})]}),(0,s.jsx)(r.p,{children:"The top variable."}),(0,s.jsxs)(r.p,{children:["\u2022 ",(0,s.jsx)(r.code,{children:"set"})," ",(0,s.jsx)(r.strong,{children:"top"}),"(",(0,s.jsx)(r.code,{children:"top"}),"): ",(0,s.jsx)(r.code,{children:"void"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-attributes",children:"attributes"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"attributes"}),"(",(0,s.jsx)(r.code,{children:"options?"}),"): ",(0,s.jsx)(r.code,{children:"Attribute"}),"[]"]}),(0,s.jsxs)(r.p,{children:["Return attributes filtered by their ",(0,s.jsx)(r.em,{children:"source"}),", ",(0,s.jsx)(r.em,{children:"role"}),", or ",(0,s.jsx)(r.em,{children:"target"}),".\nAttributes don't include concept triples or those where the\ntarget is a nonterminal."]}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"options"})," consists of the following:"]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"source"}),": The source variable to filter by."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"role"}),": The role to filter by."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"target"}),": The target constant to filter by."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-edges",children:"edges"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"edges"}),"(",(0,s.jsx)(r.code,{children:"options?"}),"): ",(0,s.jsx)(r.code,{children:"Edge"}),"[]"]}),(0,s.jsxs)(r.p,{children:["Return edges filtered by their ",(0,s.jsx)(r.em,{children:"source"}),", ",(0,s.jsx)(r.em,{children:"role"}),", or ",(0,s.jsx)(r.em,{children:"target"}),".\nEdges don't include terminal triples (concepts or attributes)."]}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"options"})," consists of the following:"]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"source"}),": The source variable to filter by."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"role"}),": The role to filter by."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"target"}),": The target variable to filter by."]}),"\n"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-equals",children:"equals"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"equals"}),"(",(0,s.jsx)(r.code,{children:"other"}),"): ",(0,s.jsx)(r.code,{children:"boolean"})]}),(0,s.jsxs)(r.p,{children:["Return ",(0,s.jsx)(r.code,{children:"true"})," if this graph is equal to other graph"]}),(0,s.jsxs)(r.p,{children:["Equivalent to ",(0,s.jsx)(r.code,{children:"__eq__"})," in Python"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-instances",children:"instances"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"instances"}),"(): ",(0,s.jsx)(r.code,{children:"Instance"}),"[]"]}),(0,s.jsx)(r.p,{children:"Return instances (concept triples)."}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-ior",children:"ior"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"ior"}),"(",(0,s.jsx)(r.code,{children:"other"}),"): ",(0,s.jsx)(r.code,{children:"Graph"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-isub",children:"isub"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"isub"}),"(",(0,s.jsx)(r.code,{children:"other"}),"): ",(0,s.jsx)(r.code,{children:"Graph"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-or",children:"or"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"or"}),"(",(0,s.jsx)(r.code,{children:"other"}),"): ",(0,s.jsx)(r.code,{children:"Graph"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-pprint",children:"pprint"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"pprint"}),"(): ",(0,s.jsx)(r.code,{children:"string"})]}),(0,s.jsxs)(r.p,{children:["Equivalent to ",(0,s.jsx)(r.code,{children:"__repr__"})," in Python"]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-reentrancies",children:"reentrancies"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"reentrancies"}),"(): ",(0,s.jsx)(r.code,{children:"Map"}),"<",(0,s.jsx)(r.code,{children:"string"}),", ",(0,s.jsx)(r.code,{children:"number"}),">"]}),(0,s.jsx)(r.p,{children:"Return a mapping of variables to their re-entrancy count.\nA re-entrancy is when more than one edge selects a node as its\ntarget. These graphs are rooted, so the top node always has an\nimplicit entrancy. Only nodes with re-entrancies are reported,\nand the count is only for the entrant edges beyond the first.\nAlso note that these counts are for the interpreted graph, not\nfor the linearized form, so inverted edges are always\nre-entrant."}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-sub",children:"sub"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"sub"}),"(",(0,s.jsx)(r.code,{children:"other"}),"): ",(0,s.jsx)(r.code,{children:"Graph"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-toString",children:"toString"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"toString"}),"(): ",(0,s.jsx)(r.code,{children:"string"})]}),(0,s.jsx)(r.hr,{}),(0,s.jsx)(r.h3,{id:"graph-variables",children:"variables"}),(0,s.jsxs)(r.p,{children:["\u25b8 ",(0,s.jsx)(r.strong,{children:"variables"}),"(): ",(0,s.jsx)(r.code,{children:"Set"}),"<",(0,s.jsx)(r.code,{children:"string"}),">"]}),(0,s.jsx)(r.p,{children:"Return the set of variables (nonterminal node identifiers)."})]})]})}function l(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}function a(e){const r={h2:"h2",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"type-alias-triple",children:"Type alias: Triple"}),"\n",(0,s.jsxs)(r.p,{children:["\u01ac ",(0,s.jsx)(r.strong,{children:"Triple"}),": [source: Variable, role: Role, target: Target]"]}),"\n",(0,s.jsx)(r.p,{children:"Represents a relation between nodes or between a node and a constant."})]})}function c(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}function d(e){const r={h2:"h2",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"type-alias-instance",children:"Type alias: Instance"}),"\n",(0,s.jsxs)(r.p,{children:["\u01ac ",(0,s.jsx)(r.strong,{children:"Instance"}),": [source: Variable, role: Role, target: Constant]"]}),"\n",(0,s.jsx)(r.p,{children:"A relation indicating the concept of a node."})]})}function o(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function h(e){const r={h2:"h2",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"type-alias-edge",children:"Type alias: Edge"}),"\n",(0,s.jsxs)(r.p,{children:["\u01ac ",(0,s.jsx)(r.strong,{children:"Edge"}),": [source: Variable, role: Role, target: Variable]"]}),"\n",(0,s.jsx)(r.p,{children:"A relation between nodes."})]})}function p(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function x(e){const r={h2:"h2",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"type-alias-attribute",children:"Type alias: Attribute"}),"\n",(0,s.jsxs)(r.p,{children:["\u01ac ",(0,s.jsx)(r.strong,{children:"Attribute"}),": [source: Variable, role: Role, target: Constant]"]}),"\n",(0,s.jsx)(r.p,{children:"A relation between a node and a constant."})]})}function j(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}const g={},u="graph",b={id:"api.graph",title:"graph",description:"_",source:"@site/docs/api.graph.mdx",sourceDirName:".",slug:"/api.graph",permalink:"/penman-js/api.graph",draft:!1,unlisted:!1,editUrl:"https://github.com/chanind/penman-js/tree/main/docs/docs/api.graph.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"exceptions",permalink:"/penman-js/api.exceptions"},next:{title:"layout",permalink:"/penman-js/api.layout"}},v={},m=[{value:"Class: Graph",id:"class-graph",level:2},{value:"constructor",id:"graph-constructor",level:3},{value:"epidata",id:"graph-epidata",level:3},{value:"metadata",id:"graph-metadata",level:3},{value:"triples",id:"graph-triples",level:3},{value:"top",id:"graph-top",level:3},{value:"attributes",id:"graph-attributes",level:3},{value:"edges",id:"graph-edges",level:3},{value:"equals",id:"graph-equals",level:3},{value:"instances",id:"graph-instances",level:3},{value:"ior",id:"graph-ior",level:3},{value:"isub",id:"graph-isub",level:3},{value:"or",id:"graph-or",level:3},{value:"pprint",id:"graph-pprint",level:3},{value:"reentrancies",id:"graph-reentrancies",level:3},{value:"sub",id:"graph-sub",level:3},{value:"toString",id:"graph-toString",level:3},{value:"variables",id:"graph-variables",level:3},{value:"Type alias: Triple",id:"type-alias-triple",level:2},{value:"Type alias: Instance",id:"type-alias-instance",level:2},{value:"Type alias: Edge",id:"type-alias-edge",level:2},{value:"Type alias: Attribute",id:"type-alias-attribute",level:2}];function f(e){const r={h1:"h1",hr:"hr",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"graph",children:"graph"}),"\n",(0,s.jsx)(l,{}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(p,{}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(j,{})]})}function y(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>a,a:()=>l});var s=n(7294);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);